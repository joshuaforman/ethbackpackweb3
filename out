AbstractContract {
  providersModuleFactory: ProvidersModuleFactory {},
  providerDetector: ProviderDetector {},
  providerResolver: ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
  givenProvider: null,
  _currentProvider: 
   HttpProvider {
     host: 'https://rinkeby.infura.io/v3/4d2d6e061aba4c268300596d28fc69a8',
     timeout: 0,
     headers: undefined,
     connected: true,
     providersModuleFactory: ProvidersModuleFactory {},
     agent: { httpsAgent: [Object] } },
  _defaultAccount: undefined,
  _defaultBlock: 'latest',
  _transactionBlockTimeout: 50,
  _transactionConfirmationBlocks: 24,
  _transactionPollingTimeout: 750,
  _defaultGasPrice: undefined,
  _defaultGas: undefined,
  BatchRequest: [Function],
  contractModuleFactory: 
   ContractModuleFactory {
     utils: 
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Object],
        sha3: [Object],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters: 
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [Object] },
     accounts: 
      Accounts {
        providersModuleFactory: ProvidersModuleFactory {},
        providerDetector: ProviderDetector {},
        providerResolver: [Object],
        givenProvider: null,
        _currentProvider: [Object],
        _defaultAccount: undefined,
        _defaultBlock: 'latest',
        _transactionBlockTimeout: 50,
        _transactionConfirmationBlocks: 24,
        _transactionPollingTimeout: 750,
        _defaultGasPrice: undefined,
        _defaultGas: undefined,
        BatchRequest: [Function],
        methodFactory: [Object],
        utils: [Object],
        formatters: [Object],
        wallet: [Object] },
     methodModuleFactory: 
      ModuleFactory {
        accounts: [Object],
        subscriptionsFactory: [Object],
        formatters: [Object],
        utils: [Object] } },
  abiCoder: 
   AbiCoder {
     utils: 
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Object],
        sha3: [Object],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     ethersAbiCoder: AbiCoder { coerceFunc: [Function] } },
  utils: 
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters: 
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  abiMapper: 
   AbiMapper {
     utils: 
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Object],
        sha3: [Object],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [Object] },
     contractModuleFactory: 
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [Object],
        accounts: [Object],
        methodModuleFactory: [Object] } },
  options: { address: '0xe7B2960e25DDa54531319FD0d186f43f1B0BFbF7' },
  PromiEvent: [Function: PromiEvent],
  methodFactory: 
   MethodFactory {
     accounts: 
      Accounts {
        providersModuleFactory: ProvidersModuleFactory {},
        providerDetector: ProviderDetector {},
        providerResolver: [Object],
        givenProvider: null,
        _currentProvider: [Object],
        _defaultAccount: undefined,
        _defaultBlock: 'latest',
        _transactionBlockTimeout: 50,
        _transactionConfirmationBlocks: 24,
        _transactionPollingTimeout: 750,
        _defaultGasPrice: undefined,
        _defaultGas: undefined,
        BatchRequest: [Function],
        methodFactory: [Object],
        utils: [Object],
        formatters: [Object],
        wallet: [Object] },
     utils: 
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Object],
        sha3: [Object],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters: 
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     contractModuleFactory: 
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [Object],
        accounts: [Object],
        methodModuleFactory: [Object] },
     methodModuleFactory: 
      ModuleFactory {
        accounts: [Object],
        subscriptionsFactory: [Object],
        formatters: [Object],
        utils: [Object] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [Object] } },
  abiModel: AbiModel { abi: { methods: [Object], events: [Object] } },
  methods: 
   MethodsProxy {
     contract: [Circular],
     abiModel: AbiModel { abi: [Object] },
     methodFactory: 
      MethodFactory {
        accounts: [Object],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [Object],
        methodModuleFactory: [Object],
        abiCoder: [Object] },
     methodEncoder: MethodEncoder { abiCoder: [Object] },
     methodOptionsValidator: MethodOptionsValidator { utils: [Object] },
     methodOptionsMapper: MethodOptionsMapper { utils: [Object], formatters: [Object] },
     PromiEvent: [Function: PromiEvent] },
  events: 
   EventSubscriptionsProxy {
     contract: [Circular],
     eventSubscriptionFactory: EventSubscriptionFactory { utils: [Object], formatters: [Object] },
     abiModel: AbiModel { abi: [Object] },
     eventOptionsMapper: EventOptionsMapper { formatters: [Object], eventFilterEncoder: [Object] },
     eventLogDecoder: EventLogDecoder { abiCoder: [Object] },
     allEventsLogDecoder: AllEventsLogDecoder { abiCoder: [Object] },
     allEventsOptionsMapper: AllEventsOptionsMapper { formatters: [Object], allEventsFilterEncoder: [Object] },
     PromiEvent: [Function: PromiEvent] } }
